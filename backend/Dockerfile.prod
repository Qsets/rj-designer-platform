# 多阶段构建 - 生产环境后端Dockerfile
FROM maven:3.8.6-openjdk-17-slim AS builder

# 设置工作目录
WORKDIR /app

# 复制pom.xml和源代码
COPY pom.xml .
COPY src ./src

# 构建应用
RUN mvn clean package -DskipTests -Dmaven.javadoc.skip=true

# 生产环境镜像
FROM openjdk:17-jre-slim

# 创建非root用户
RUN groupadd -r junjian && useradd -r -g junjian junjian

# 安装必要的工具
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# 设置工作目录
WORKDIR /app

# 创建必要目录
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R junjian:junjian /app

# 从构建阶段复制jar文件
COPY --from=builder /app/target/*.jar app.jar

# 复制配置文件
COPY src/main/resources/application-production.yml application-production.yml

# 设置文件权限
RUN chown junjian:junjian app.jar application-production.yml

# 切换到非root用户
USER junjian

# 暴露端口
EXPOSE 8080

# JVM优化参数
ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+UseCompressedOops -Djava.security.egd=file:/dev/./urandom -Dspring.profiles.active=production"

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# 启动应用
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]